{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport { decodeToken } from './decodeToken.js';\n\nfunction verifyToken(_x, _x2, _x3) {\n  return _verifyToken.apply(this, arguments);\n}\n\nfunction _verifyToken() {\n  _verifyToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, token, validationParams) {\n    var jwt, configuredIssuer, _yield$getWellKnown, issuer, validationOptions, key, valid, hash;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(!token || !token.idToken)) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new AuthSdkError('Only idTokens may be verified');\n\n        case 2:\n          jwt = decodeToken(token.idToken);\n          configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n          _context.next = 6;\n          return getWellKnown(sdk, configuredIssuer);\n\n        case 6:\n          _yield$getWellKnown = _context.sent;\n          issuer = _yield$getWellKnown.issuer;\n          validationOptions = Object.assign({\n            clientId: sdk.options.clientId,\n            ignoreSignature: sdk.options.ignoreSignature\n          }, validationParams, {\n            issuer: issuer\n          });\n          validateClaims(sdk, jwt.payload, validationOptions);\n\n          if (!(validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported())) {\n            _context.next = 12;\n            break;\n          }\n\n          return _context.abrupt(\"return\", token);\n\n        case 12:\n          _context.next = 14;\n          return getKey(sdk, token.issuer, jwt.header.kid);\n\n        case 14:\n          key = _context.sent;\n          _context.next = 17;\n          return verifyToken$1(token.idToken, key);\n\n        case 17:\n          valid = _context.sent;\n\n          if (valid) {\n            _context.next = 20;\n            break;\n          }\n\n          throw new AuthSdkError('The token signature is not valid');\n\n        case 20:\n          if (!(validationParams && validationParams.accessToken && token.claims.at_hash)) {\n            _context.next = 26;\n            break;\n          }\n\n          _context.next = 23;\n          return getOidcHash(validationParams.accessToken);\n\n        case 23:\n          hash = _context.sent;\n\n          if (!(hash !== token.claims.at_hash)) {\n            _context.next = 26;\n            break;\n          }\n\n          throw new AuthSdkError('Token hash verification failed');\n\n        case 26:\n          return _context.abrupt(\"return\", token);\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _verifyToken.apply(this, arguments);\n}\n\nexport { verifyToken }; //# sourceMappingURL=verifyToken.js.map","map":null,"metadata":{},"sourceType":"module"}