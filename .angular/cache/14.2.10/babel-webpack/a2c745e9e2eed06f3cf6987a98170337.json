{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport Cookies from 'js-cookie';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { warn } from '../util/console.js';\nimport { isIE11OrLess } from '../features.js';\nvar storageUtil = {\n  browserHasLocalStorage: function browserHasLocalStorage() {\n    try {\n      var storage = this.getLocalStorage();\n      return this.testStorage(storage);\n    } catch (e) {\n      return false;\n    }\n  },\n  browserHasSessionStorage: function browserHasSessionStorage() {\n    try {\n      var storage = this.getSessionStorage();\n      return this.testStorage(storage);\n    } catch (e) {\n      return false;\n    }\n  },\n  testStorageType: function testStorageType(storageType) {\n    var supported = false;\n\n    switch (storageType) {\n      case 'sessionStorage':\n        supported = this.browserHasSessionStorage();\n        break;\n\n      case 'localStorage':\n        supported = this.browserHasLocalStorage();\n        break;\n\n      case 'cookie':\n      case 'memory':\n        supported = true;\n        break;\n\n      default:\n        supported = false;\n        break;\n    }\n\n    return supported;\n  },\n  getStorageByType: function getStorageByType(storageType, options) {\n    var storageProvider;\n\n    switch (storageType) {\n      case 'sessionStorage':\n        storageProvider = this.getSessionStorage();\n        break;\n\n      case 'localStorage':\n        storageProvider = this.getLocalStorage();\n        break;\n\n      case 'cookie':\n        storageProvider = this.getCookieStorage(options);\n        break;\n\n      case 'memory':\n        storageProvider = this.getInMemoryStorage();\n        break;\n\n      default:\n        throw new AuthSdkError(\"Unrecognized storage option: \".concat(storageType));\n    }\n\n    return storageProvider;\n  },\n  findStorageType: function findStorageType(types) {\n    var curType;\n    var nextType;\n    types = types.slice();\n    curType = types.shift();\n    nextType = types.length ? types[0] : null;\n\n    if (!nextType) {\n      return curType;\n    }\n\n    if (this.testStorageType(curType)) {\n      return curType;\n    }\n\n    warn(\"This browser doesn't support \".concat(curType, \". Switching to \").concat(nextType, \".\"));\n    return this.findStorageType(types);\n  },\n  getLocalStorage: function getLocalStorage() {\n    if (isIE11OrLess() && !window.onstorage) {\n      window.onstorage = function () {};\n    }\n\n    return localStorage;\n  },\n  getSessionStorage: function getSessionStorage() {\n    return sessionStorage;\n  },\n  getCookieStorage: function getCookieStorage(options) {\n    var _this = this;\n\n    var secure = options.secure;\n    var sameSite = options.sameSite;\n    var sessionCookie = options.sessionCookie;\n\n    if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {\n      throw new AuthSdkError('getCookieStorage: \"secure\" and \"sameSite\" options must be provided');\n    }\n\n    var storage = {\n      getItem: this.storage.get,\n      setItem: function setItem(key, value) {\n        var expiresAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '2200-01-01T00:00:00.000Z';\n        expiresAt = sessionCookie ? null : expiresAt;\n\n        _this.storage.set(key, value, expiresAt, {\n          secure: secure,\n          sameSite: sameSite\n        });\n      },\n      removeItem: function removeItem(key) {\n        _this.storage.delete(key);\n      }\n    };\n\n    if (!options.useSeparateCookies) {\n      return storage;\n    }\n\n    return {\n      getItem: function getItem(key) {\n        var data = storage.getItem();\n        var value = {};\n        Object.keys(data).forEach(function (k) {\n          if (k.indexOf(key) === 0) {\n            value[k.replace(\"\".concat(key, \"_\"), '')] = JSON.parse(data[k]);\n          }\n        });\n        return JSON.stringify(value);\n      },\n      setItem: function setItem(key, value) {\n        var existingValues = JSON.parse(this.getItem(key));\n        value = JSON.parse(value);\n        Object.keys(value).forEach(function (k) {\n          var storageKey = key + '_' + k;\n          var valueToStore = JSON.stringify(value[k]);\n          storage.setItem(storageKey, valueToStore);\n          delete existingValues[k];\n        });\n        Object.keys(existingValues).forEach(function (k) {\n          storage.removeItem(key + '_' + k);\n        });\n      },\n      removeItem: function removeItem(key) {\n        var existingValues = JSON.parse(this.getItem(key));\n        Object.keys(existingValues).forEach(function (k) {\n          storage.removeItem(key + '_' + k);\n        });\n      }\n    };\n  },\n  inMemoryStore: {},\n  getInMemoryStorage: function getInMemoryStorage() {\n    var _this2 = this;\n\n    return {\n      getItem: function getItem(key) {\n        return _this2.inMemoryStore[key];\n      },\n      setItem: function setItem(key, value) {\n        _this2.inMemoryStore[key] = value;\n      }\n    };\n  },\n  testStorage: function testStorage(storage) {\n    var key = 'okta-test-storage';\n\n    try {\n      storage.setItem(key, key);\n      storage.removeItem(key);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  storage: {\n    set: function set(name, value, expiresAt, options) {\n      var sameSite = options.sameSite,\n          secure = options.secure;\n\n      if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {\n        throw new AuthSdkError('storage.set: \"secure\" and \"sameSite\" options must be provided');\n      }\n\n      var cookieOptions = {\n        path: options.path || '/',\n        secure: secure,\n        sameSite: sameSite\n      };\n\n      if (!!Date.parse(expiresAt)) {\n        cookieOptions.expires = new Date(expiresAt);\n      }\n\n      Cookies.set(name, value, cookieOptions);\n      return this.get(name);\n    },\n    get: function get(name) {\n      if (!arguments.length) {\n        return Cookies.get();\n      }\n\n      return Cookies.get(name);\n    },\n    delete: function _delete(name) {\n      return Cookies.remove(name, {\n        path: '/'\n      });\n    }\n  }\n};\nexport { storageUtil as default }; //# sourceMappingURL=browserStorage.js.map","map":null,"metadata":{},"sourceType":"module"}