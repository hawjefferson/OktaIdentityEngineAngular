{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { PromiseQueue } from '../../util/PromiseQueue.js';\nimport { decodeToken } from '../decodeToken.js';\nimport { exchangeCodeForTokens } from '../exchangeCodeForTokens.js';\nimport { getUserInfo as _getUserInfo } from '../getUserInfo.js';\nimport { getWithoutPrompt } from '../getWithoutPrompt.js';\nimport { getWithPopup } from '../getWithPopup.js';\nimport { getWithRedirect } from '../getWithRedirect.js';\nimport { parseFromUrl } from '../parseFromUrl.js';\nimport { renewToken } from '../renewToken.js';\nimport { renewTokens } from '../renewTokens.js';\nimport { renewTokensWithRefresh } from '../renewTokensWithRefresh.js';\nimport { revokeToken } from '../revokeToken.js';\nimport { isLoginRedirect } from '../util/loginRedirect.js';\nimport { prepareTokenParams } from '../util/prepareTokenParams.js';\nimport { verifyToken } from '../verifyToken.js';\n\nfunction createTokenAPI(sdk, queue) {\n  var useQueue = function useQueue(method) {\n    return PromiseQueue.prototype.push.bind(queue, method, null);\n  };\n\n  var getWithRedirectFn = useQueue(getWithRedirect.bind(null, sdk));\n  var getWithRedirectApi = Object.assign(getWithRedirectFn, {\n    _setLocation: function _setLocation(url) {\n      if (sdk.options.setLocation) {\n        sdk.options.setLocation(url);\n      } else {\n        window.location = url;\n      }\n    }\n  });\n  var parseFromUrlFn = useQueue(parseFromUrl.bind(null, sdk));\n  var parseFromUrlApi = Object.assign(parseFromUrlFn, {\n    _getHistory: function _getHistory() {\n      return window.history;\n    },\n    _getLocation: function _getLocation() {\n      return window.location;\n    },\n    _getDocument: function _getDocument() {\n      return window.document;\n    }\n  });\n  var token = {\n    prepareTokenParams: prepareTokenParams.bind(null, sdk),\n    exchangeCodeForTokens: exchangeCodeForTokens.bind(null, sdk),\n    getWithoutPrompt: getWithoutPrompt.bind(null, sdk),\n    getWithPopup: getWithPopup.bind(null, sdk),\n    getWithRedirect: getWithRedirectApi,\n    parseFromUrl: parseFromUrlApi,\n    decode: decodeToken,\n    revoke: revokeToken.bind(null, sdk),\n    renew: renewToken.bind(null, sdk),\n    renewTokensWithRefresh: renewTokensWithRefresh.bind(null, sdk),\n    renewTokens: renewTokens.bind(null, sdk),\n    getUserInfo: function getUserInfo(accessTokenObject, idTokenObject) {\n      return _getUserInfo(sdk, accessTokenObject, idTokenObject);\n    },\n    verify: verifyToken.bind(null, sdk),\n    isLoginRedirect: isLoginRedirect.bind(null, sdk)\n  };\n  var toWrap = ['getWithoutPrompt', 'getWithPopup', 'revoke', 'renew', 'renewTokensWithRefresh', 'renewTokens'];\n  toWrap.forEach(function (key) {\n    token[key] = useQueue(token[key]);\n  });\n  return token;\n}\n\nexport { createTokenAPI }; //# sourceMappingURL=api.js.map","map":null,"metadata":{},"sourceType":"module"}