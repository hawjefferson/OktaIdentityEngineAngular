{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nvar Remediator = /*#__PURE__*/function () {\n  function Remediator(remediation) {\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Remediator);\n\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  _createClass(Remediator, [{\n    key: \"formatAuthenticators\",\n    value: function formatAuthenticators() {\n      this.values.authenticators = this.values.authenticators || [];\n      this.values.authenticators = this.values.authenticators.map(function (authenticator) {\n        return formatAuthenticator(authenticator);\n      });\n\n      if (this.values.authenticator) {\n        var authenticator = formatAuthenticator(this.values.authenticator);\n        var hasAuthenticatorInList = this.values.authenticators.some(function (existing) {\n          return compareAuthenticators(authenticator, existing);\n        });\n\n        if (!hasAuthenticatorInList) {\n          this.values.authenticators.push(authenticator);\n        }\n      }\n\n      this.values.authenticatorsData = this.values.authenticators.reduce(function (acc, authenticator) {\n        if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n          acc.push(authenticator);\n        }\n\n        return acc;\n      }, this.values.authenticatorsData || []);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.remediation.name;\n    }\n  }, {\n    key: \"canRemediate\",\n    value: function canRemediate() {\n      var _this = this;\n\n      var required = getRequiredValues(this.remediation);\n      var needed = required.find(function (key) {\n        return !_this.hasData(key);\n      });\n\n      if (needed) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key) {\n      var _this2 = this;\n\n      if (!key) {\n        var allValues = getAllValues(this.remediation);\n        var res = allValues.reduce(function (data, key) {\n          data[key] = _this2.getData(key);\n          return data;\n        }, {});\n        return res;\n      }\n\n      if (typeof this[\"map\".concat(titleCase(key))] === 'function') {\n        var val = this[\"map\".concat(titleCase(key))](this.remediation.value.find(function (_ref) {\n          var name = _ref.name;\n          return name === key;\n        }));\n\n        if (val) {\n          return val;\n        }\n      }\n\n      if (this.map && this.map[key]) {\n        var entry = this.map[key];\n\n        for (var i = 0; i < entry.length; i++) {\n          var _val = this.values[entry[i]];\n\n          if (_val) {\n            return _val;\n          }\n        }\n      }\n\n      return this.values[key];\n    }\n  }, {\n    key: \"hasData\",\n    value: function hasData(key) {\n      return !!this.getData(key);\n    }\n  }, {\n    key: \"getNextStep\",\n    value: function getNextStep(_authClient, _context) {\n      var name = this.getName();\n      var inputs = this.getInputs();\n      var authenticator = this.getAuthenticator();\n      var type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n      return Object.assign(Object.assign({\n        name: name,\n        inputs: inputs\n      }, type && {\n        type: type\n      }), authenticator && {\n        authenticator: authenticator\n      });\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs() {\n      var _this3 = this;\n\n      var inputs = [];\n      var inputsFromRemediation = this.remediation.value || [];\n      inputsFromRemediation.forEach(function (inputFromRemediation) {\n        var input;\n        var name = inputFromRemediation.name,\n            type = inputFromRemediation.type,\n            visible = inputFromRemediation.visible,\n            messages = inputFromRemediation.messages;\n\n        if (visible === false) {\n          return;\n        }\n\n        if (typeof _this3[\"getInput\".concat(titleCase(name))] === 'function') {\n          input = _this3[\"getInput\".concat(titleCase(name))](inputFromRemediation);\n        } else if (type !== 'object') {\n          var alias;\n          var aliases = (_this3.map ? _this3.map[name] : null) || [];\n\n          if (aliases.length === 1) {\n            alias = aliases[0];\n          } else {\n            alias = aliases.find(function (name) {\n              return Object.keys(_this3.values).includes(name);\n            });\n          }\n\n          if (alias) {\n            input = Object.assign(Object.assign({}, inputFromRemediation), {\n              name: alias\n            });\n          }\n        }\n\n        if (!input) {\n          input = inputFromRemediation;\n        }\n\n        if (Array.isArray(input)) {\n          input.forEach(function (i) {\n            return inputs.push(i);\n          });\n        } else {\n          if (messages) {\n            input.messages = messages;\n          }\n\n          inputs.push(input);\n        }\n      });\n      return inputs;\n    }\n  }, {\n    key: \"getValuesAfterProceed\",\n    value: function getValuesAfterProceed() {\n      var inputsFromRemediation = this.remediation.value || [];\n      var inputsFromRemediator = this.getInputs();\n      var inputs = [].concat(_toConsumableArray(inputsFromRemediation), _toConsumableArray(inputsFromRemediator));\n\n      var _iterator = _createForOfIteratorHelper(inputs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var input = _step.value;\n          delete this.values[input.name];\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this.values;\n    }\n  }, {\n    key: \"getAuthenticator\",\n    value: function getAuthenticator() {\n      var _a, _b;\n\n      var relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n\n      if (!relatesTo) {\n        return;\n      }\n\n      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n\n      if (!authenticatorFromRemediation) {\n        return relatesTo;\n      }\n\n      var id = authenticatorFromRemediation.form.value.find(function (_ref2) {\n        var name = _ref2.name;\n        return name === 'id';\n      }).value;\n      var enrollmentId = (_b = authenticatorFromRemediation.form.value.find(function (_ref3) {\n        var name = _ref3.name;\n        return name === 'enrollmentId';\n      })) === null || _b === void 0 ? void 0 : _b.value;\n      return Object.assign(Object.assign({}, relatesTo), {\n        id: id,\n        enrollmentId: enrollmentId\n      });\n    }\n  }], [{\n    key: \"getMessages\",\n    value: function getMessages(remediation) {\n      var _a, _b;\n\n      if (!remediation.value) {\n        return;\n      }\n\n      return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce(function (messages, field) {\n        if (field.messages) {\n          messages = [].concat(_toConsumableArray(messages), _toConsumableArray(field.messages.value));\n        }\n\n        return messages;\n      }, []);\n    }\n  }]);\n\n  return Remediator;\n}();\n\nexport { Remediator }; //# sourceMappingURL=Remediator.js.map","map":null,"metadata":{},"sourceType":"module"}