{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar model_1 = require(\"../model\");\n\nvar format_sanitizer_1 = require(\"./format-sanitizer\");\n\nvar Compiler = /*#__PURE__*/function () {\n  function Compiler(customNotations) {\n    _classCallCheck(this, Compiler);\n\n    this.customNotations = customNotations;\n  }\n\n  _createClass(Compiler, [{\n    key: \"compile\",\n    value: function compile(formatString) {\n      try {\n        var sanitizedString = format_sanitizer_1.FormatSanitizer.sanitize(formatString);\n        return this._compile(sanitizedString, false, false, null);\n      } catch (e) {\n        throw new Error('Wrong format');\n      }\n    }\n  }, {\n    key: \"_compile\",\n    value: function _compile(formatString, valuable, fixed, lastCharacter) {\n      if (formatString.isEmpty()) {\n        return new model_1.EOLState();\n      }\n\n      var char = formatString.first();\n\n      switch (char) {\n        case '[':\n          {\n            if (lastCharacter !== '\\\\') {\n              return this._compile(formatString.substring(1), true, false, char);\n            }\n\n            break;\n          }\n\n        case '{':\n          {\n            if (lastCharacter !== '\\\\') {\n              return this._compile(formatString.substring(1), false, true, char);\n            }\n\n            break;\n          }\n\n        case ']':\n          {\n            if (lastCharacter !== '\\\\') {\n              return this._compile(formatString.substring(1), false, false, char);\n            }\n\n            break;\n          }\n\n        case '}':\n          {\n            if (lastCharacter !== '\\\\') {\n              return this._compile(formatString.substring(1), false, false, char);\n            }\n\n            break;\n          }\n\n        case '\\\\':\n          {\n            if (lastCharacter !== '\\\\') {\n              return this._compile(formatString.substring(1), valuable, fixed, char);\n            }\n\n            break;\n          }\n      }\n\n      if (valuable) {\n        switch (char) {\n          case '0':\n            {\n              return new model_1.ValueState(this._compile(formatString.substring(1), true, false, char), new model_1.ValueState.Numeric());\n            }\n\n          case 'A':\n            {\n              return new model_1.ValueState(this._compile(formatString.substring(1), true, false, char), new model_1.ValueState.Literal());\n            }\n\n          case '_':\n            {\n              return new model_1.ValueState(this._compile(formatString.substring(1), true, false, char), new model_1.ValueState.AlphaNumeric());\n            }\n\n          case '...':\n            {\n              return new model_1.ValueState(null, this.determineInheritedType(lastCharacter));\n            }\n\n          case '9':\n            {\n              return new model_1.OptionalValueState(this._compile(formatString.substring(1), true, false, char), new model_1.OptionalValueState.Numeric());\n            }\n\n          case 'a':\n            {\n              return new model_1.OptionalValueState(this._compile(formatString.substring(1), true, false, char), new model_1.OptionalValueState.Literal());\n            }\n\n          case '-':\n            {\n              return new model_1.OptionalValueState(this._compile(formatString.substring(1), true, false, char), new model_1.OptionalValueState.AlphaNumeric());\n            }\n\n          default:\n            {\n              return this.compileWithCustomNotations(char, formatString);\n            }\n        }\n      }\n\n      if (fixed) {\n        return new model_1.FixedState(this._compile(formatString.substring(1), false, true, char), char);\n      }\n\n      return new model_1.FreeState(this._compile(formatString.substring(1), false, false, char), char);\n    }\n  }, {\n    key: \"determineInheritedType\",\n    value: function determineInheritedType(lastCharacter) {\n      switch (lastCharacter) {\n        case '0' || '9':\n          {\n            return new model_1.ValueState.Numeric();\n          }\n\n        case 'A' || 'a':\n          {\n            return new model_1.ValueState.Literal();\n          }\n\n        case '_' || '_':\n          {\n            return new model_1.ValueState.AlphaNumeric();\n          }\n\n        case '...':\n          {\n            return new model_1.ValueState.AlphaNumeric();\n          }\n\n        case '[':\n          {\n            return new model_1.ValueState.AlphaNumeric();\n          }\n\n        default:\n          {\n            return this.determineTypeWithCustomNotation(lastCharacter);\n          }\n      }\n    }\n  }, {\n    key: \"compileWithCustomNotations\",\n    value: function compileWithCustomNotations(char, str) {\n      var notation = this.customNotations.find(function (x) {\n        return x.character === char;\n      });\n      if (!notation) throw new Error('Wrong format');\n\n      if (notation.isOptional) {\n        return new model_1.OptionalValueState(this._compile(str.substring(1), true, false, char), new model_1.OptionalValueState.Custom(char, notation.characterSet));\n      } else {\n        return new model_1.ValueState(this._compile(str.substring(1), true, false, char), new model_1.ValueState.Custom(char, notation.characterSet));\n      }\n    }\n  }, {\n    key: \"determineTypeWithCustomNotation\",\n    value: function determineTypeWithCustomNotation(lastCharacter) {\n      var _iterator = _createForOfIteratorHelper(this.customNotations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var notation = _step.value;\n\n          if (notation.character === lastCharacter) {\n            return new model_1.ValueState.Custom(lastCharacter, notation.characterSet);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      throw new Error('Wrong format');\n    }\n  }]);\n\n  return Compiler;\n}();\n\nexports.Compiler = Compiler;","map":null,"metadata":{},"sourceType":"script"}