{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar model_1 = require(\"../model\");\n\nvar compiler_1 = require(\"./compiler\");\n\nvar caret_string_iterator_1 = require(\"./caret-string-iterator\");\n\nvar Mask = /*#__PURE__*/function () {\n  function Mask(format, customNotations) {\n    var _this = this;\n\n    _classCallCheck(this, Mask);\n\n    this.format = format;\n    this.customNotations = customNotations;\n    this.initialState = new compiler_1.Compiler(this.customNotations).compile(this.format);\n\n    this.placeholder = function () {\n      return _this.appendPlaceholder(_this.initialState, '');\n    };\n  }\n\n  _createClass(Mask, [{\n    key: \"apply\",\n    value: function apply(text, autocomplete) {\n      var iterator = new caret_string_iterator_1.CaretStringIterator(text);\n      var affinity = 0;\n      var extractedValue = '';\n      var modifiedString = '';\n      var modifiedCaretPosition = text.caretPosition;\n      var state = this.initialState;\n      var beforeCaret = iterator.beforeCaret();\n      var character = iterator.next();\n      var next;\n\n      while (!!character) {\n        next = state.accept(character);\n\n        if (!!next) {\n          state = next.state;\n          modifiedString += !!next.insert ? next.insert : '';\n          extractedValue += !!next.value ? next.value : '';\n\n          if (next.pass) {\n            beforeCaret = iterator.beforeCaret();\n            character = iterator.next();\n            ++affinity;\n          } else {\n            if (beforeCaret && next.insert !== null) {\n              ++modifiedCaretPosition;\n            }\n\n            --affinity;\n          }\n        } else {\n          if (iterator.beforeCaret()) {\n            --modifiedCaretPosition;\n          }\n\n          beforeCaret = iterator.beforeCaret();\n          character = iterator.next();\n          --affinity;\n        }\n      }\n\n      while (autocomplete && beforeCaret) {\n        var nxt = state.autocomplete();\n\n        if (nxt === null) {\n          break;\n        }\n\n        state = nxt.state;\n        modifiedString += !!nxt.insert ? nxt.insert : '';\n        extractedValue += !!nxt.value ? nxt.value : '';\n\n        if (nxt.insert !== null) {\n          ++modifiedCaretPosition;\n        }\n      }\n\n      return new Mask.Result(new model_1.CaretString(modifiedString, modifiedCaretPosition), extractedValue, affinity, this.noMandatoryCharactersLeftAfterState(state));\n    }\n  }, {\n    key: \"acceptableTextLength\",\n    value: function acceptableTextLength() {\n      var state = this.initialState;\n      var length = 0;\n\n      while (!!state && !(state instanceof model_1.EOLState)) {\n        if (state instanceof model_1.FixedState || state instanceof model_1.FreeState || state instanceof model_1.ValueState) {\n          ++length;\n        }\n\n        state = state.child;\n      }\n\n      return length;\n    }\n  }, {\n    key: \"totalTextLength\",\n    value: function totalTextLength() {\n      var state = this.initialState;\n      var length = 0;\n\n      while (!!state && !(state instanceof model_1.EOLState)) {\n        if (state instanceof model_1.FixedState || state instanceof model_1.FreeState || state instanceof model_1.ValueState || state instanceof model_1.OptionalValueState) {\n          ++length;\n        }\n\n        state = state.child;\n      }\n\n      return length;\n    }\n  }, {\n    key: \"acceptableValueLength\",\n    value: function acceptableValueLength() {\n      var state = this.initialState;\n      var length = 0;\n\n      while (!!state && !(state instanceof model_1.EOLState)) {\n        if (state instanceof model_1.FixedState || state instanceof model_1.ValueState) {\n          ++length;\n        }\n\n        state = state.child;\n      }\n\n      return length;\n    }\n  }, {\n    key: \"totalValueLength\",\n    value: function totalValueLength() {\n      var state = this.initialState;\n      var length = 0;\n\n      while (!!state && !(state instanceof model_1.EOLState)) {\n        if (state instanceof model_1.FixedState || state instanceof model_1.ValueState || state instanceof model_1.OptionalValueState) {\n          ++length;\n        }\n\n        state = state.child;\n      }\n\n      return length;\n    }\n  }, {\n    key: \"noMandatoryCharactersLeftAfterState\",\n    value: function noMandatoryCharactersLeftAfterState(state) {\n      if (state instanceof model_1.EOLState) {\n        return true;\n      } else if (state instanceof model_1.ValueState) {\n        return state.isElliptical;\n      } else if (state instanceof model_1.FixedState) {\n        return false;\n      } else {\n        return this.noMandatoryCharactersLeftAfterState(state.nextState());\n      }\n    }\n  }, {\n    key: \"appendPlaceholder\",\n    value: function appendPlaceholder(state, placeholder) {\n      if (state === null) {\n        return placeholder;\n      }\n\n      if (state instanceof model_1.EOLState) {\n        return placeholder;\n      }\n\n      if (state instanceof model_1.FixedState) {\n        return this.appendPlaceholder(state.child, placeholder.concat(state.ownCharacter.toString()));\n      }\n\n      if (state instanceof model_1.FreeState) {\n        return this.appendPlaceholder(state.child, placeholder.concat(state.ownCharacter.toString()));\n      }\n\n      if (state instanceof model_1.OptionalValueState) {\n        if (state.type instanceof model_1.OptionalValueState.AlphaNumeric) {\n          return this.appendPlaceholder(state.child, placeholder + '-');\n        }\n\n        if (state.type instanceof model_1.OptionalValueState.Numeric) {\n          return this.appendPlaceholder(state.child, placeholder + '0');\n        }\n\n        if (state.type instanceof model_1.OptionalValueState.Literal) {\n          return this.appendPlaceholder(state.child, placeholder + 'a');\n        }\n\n        if (state.type instanceof model_1.OptionalValueState.Custom) {\n          return this.appendPlaceholder(state.child, placeholder.concat(state.type.character.toString()));\n        }\n      }\n\n      if (state instanceof model_1.ValueState) {\n        if (state.type instanceof model_1.ValueState.AlphaNumeric) {\n          return this.appendPlaceholder(state.child, placeholder + '-');\n        }\n\n        if (state.type instanceof model_1.ValueState.Numeric) {\n          return this.appendPlaceholder(state.child, placeholder + '0');\n        }\n\n        if (state.type instanceof model_1.ValueState.Literal) {\n          return this.appendPlaceholder(state.child, placeholder + 'a');\n        }\n\n        if (state.type instanceof model_1.ValueState.Ellipsis) {\n          return placeholder;\n        }\n\n        if (state.type instanceof model_1.ValueState.Custom) {\n          return this.appendPlaceholder(state.child, placeholder.concat(state.type.character.toString()));\n        }\n      }\n\n      return placeholder;\n    }\n  }], [{\n    key: \"getOrCreate\",\n    value: function getOrCreate(format, customNotations) {\n      var cachedMask = Mask.cache.get(format);\n\n      if (!cachedMask) {\n        cachedMask = new Mask(format, customNotations);\n        Mask.cache.set(format, cachedMask);\n      }\n\n      return cachedMask;\n    }\n  }]);\n\n  return Mask;\n}();\n\nexports.Mask = Mask;\nMask.cache = new Map();\n\n(function (Mask) {\n  var Result = /*#__PURE__*/_createClass(function Result(formattedText, extractedValue, affinity, complete) {\n    _classCallCheck(this, Result);\n\n    this.formattedText = formattedText;\n    this.extractedValue = extractedValue;\n    this.affinity = affinity;\n    this.complete = complete;\n  });\n\n  Mask.Result = Result;\n})(Mask = exports.Mask || (exports.Mask = {}));","map":null,"metadata":{},"sourceType":"script"}