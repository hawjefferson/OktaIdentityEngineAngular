{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getWellKnown } from '../endpoints/well-known.js';\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { getDefaultTokenParams } from './defaultTokenParams.js';\nimport { DEFAULT_CODE_CHALLENGE_METHOD } from '../../constants.js';\nimport PKCE from './pkce.js';\n\nfunction assertPKCESupport(sdk) {\n  if (!sdk.features.isPKCESupported()) {\n    var errorMessage = 'PKCE requires a modern browser with encryption support running in a secure context.';\n\n    if (!sdk.features.isHTTPS()) {\n      errorMessage += '\\nThe current page is not being served with HTTPS protocol. PKCE requires secure HTTPS protocol.';\n    }\n\n    if (!sdk.features.hasTextEncoder()) {\n      errorMessage += '\\n\"TextEncoder\" is not defined. To use PKCE, you may need to include a polyfill/shim for this browser.';\n    }\n\n    throw new AuthSdkError(errorMessage);\n  }\n}\n\nfunction validateCodeChallengeMethod(_x, _x2) {\n  return _validateCodeChallengeMethod.apply(this, arguments);\n}\n\nfunction _validateCodeChallengeMethod() {\n  _validateCodeChallengeMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, codeChallengeMethod) {\n    var wellKnownResponse, methods;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          codeChallengeMethod = codeChallengeMethod || sdk.options.codeChallengeMethod || DEFAULT_CODE_CHALLENGE_METHOD;\n          _context.next = 3;\n          return getWellKnown(sdk);\n\n        case 3:\n          wellKnownResponse = _context.sent;\n          methods = wellKnownResponse['code_challenge_methods_supported'] || [];\n\n          if (!(methods.indexOf(codeChallengeMethod) === -1)) {\n            _context.next = 7;\n            break;\n          }\n\n          throw new AuthSdkError('Invalid code_challenge_method');\n\n        case 7:\n          return _context.abrupt(\"return\", codeChallengeMethod);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _validateCodeChallengeMethod.apply(this, arguments);\n}\n\nfunction preparePKCE(_x3, _x4) {\n  return _preparePKCE.apply(this, arguments);\n}\n\nfunction _preparePKCE() {\n  _preparePKCE = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(sdk, tokenParams) {\n    var _tokenParams, codeVerifier, codeChallenge, codeChallengeMethod;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _tokenParams = tokenParams, codeVerifier = _tokenParams.codeVerifier, codeChallenge = _tokenParams.codeChallenge, codeChallengeMethod = _tokenParams.codeChallengeMethod;\n          codeChallenge = codeChallenge || sdk.options.codeChallenge;\n\n          if (codeChallenge) {\n            _context2.next = 8;\n            break;\n          }\n\n          assertPKCESupport(sdk);\n          codeVerifier = codeVerifier || PKCE.generateVerifier();\n          _context2.next = 7;\n          return PKCE.computeChallenge(codeVerifier);\n\n        case 7:\n          codeChallenge = _context2.sent;\n\n        case 8:\n          _context2.next = 10;\n          return validateCodeChallengeMethod(sdk, codeChallengeMethod);\n\n        case 10:\n          codeChallengeMethod = _context2.sent;\n          tokenParams = Object.assign(Object.assign({}, tokenParams), {\n            responseType: 'code',\n            codeVerifier: codeVerifier,\n            codeChallenge: codeChallenge,\n            codeChallengeMethod: codeChallengeMethod\n          });\n          return _context2.abrupt(\"return\", tokenParams);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _preparePKCE.apply(this, arguments);\n}\n\nfunction prepareTokenParams(_x5) {\n  return _prepareTokenParams.apply(this, arguments);\n}\n\nfunction _prepareTokenParams() {\n  _prepareTokenParams = _asyncToGenerator(function (sdk) {\n    var tokenParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      var defaults;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            defaults = getDefaultTokenParams(sdk);\n            tokenParams = Object.assign(Object.assign({}, defaults), tokenParams);\n\n            if (!(tokenParams.pkce === false)) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", tokenParams);\n\n          case 4:\n            return _context3.abrupt(\"return\", preparePKCE(sdk, tokenParams));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    })();\n  });\n  return _prepareTokenParams.apply(this, arguments);\n}\n\nexport { assertPKCESupport, preparePKCE, prepareTokenParams, validateCodeChallengeMethod }; //# sourceMappingURL=prepareTokenParams.js.map","map":null,"metadata":{},"sourceType":"module"}