{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { parseIdxResponse } from './idxResponseParser.js';\n\nfunction makeIdxState(authClient, idxResponse, toPersist, requestDidSucceed) {\n  var _a, _b, _c;\n\n  var rawIdxResponse = idxResponse;\n\n  var _parseIdxResponse = parseIdxResponse(authClient, idxResponse, toPersist),\n      remediations = _parseIdxResponse.remediations,\n      context = _parseIdxResponse.context,\n      actions = _parseIdxResponse.actions;\n\n  var neededToProceed = _toConsumableArray(remediations);\n\n  var proceed = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function (remediationChoice) {\n      var paramsFromUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var remediationChoiceObject, actionFn;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              remediationChoiceObject = remediations.find(function (remediation) {\n                return remediation.name === remediationChoice;\n              });\n\n              if (remediationChoiceObject) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject(\"Unknown remediation choice: [\".concat(remediationChoice, \"]\")));\n\n            case 3:\n              actionFn = remediationChoiceObject.action;\n\n              if (!(typeof actionFn !== 'function')) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject(\"Current remediation cannot make form submit action: [\".concat(remediationChoice, \"]\")));\n\n            case 6:\n              return _context.abrupt(\"return\", remediationChoiceObject.action(paramsFromUser));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })();\n    });\n\n    return function proceed(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var findCode = function findCode(item) {\n    return item.name === 'interaction_code';\n  };\n\n  var interactionCode = (_c = (_b = (_a = rawIdxResponse.successWithInteractionCode) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.find(findCode)) === null || _c === void 0 ? void 0 : _c.value;\n  return {\n    proceed: proceed,\n    neededToProceed: neededToProceed,\n    actions: actions,\n    context: context,\n    rawIdxState: rawIdxResponse,\n    interactionCode: interactionCode,\n    toPersist: toPersist,\n    requestDidSucceed: requestDidSucceed\n  };\n}\n\nexport { makeIdxState }; //# sourceMappingURL=makeIdxState.js.map","map":null,"metadata":{},"sourceType":"module"}