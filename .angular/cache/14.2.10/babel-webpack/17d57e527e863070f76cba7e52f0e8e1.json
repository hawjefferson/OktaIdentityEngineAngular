{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { proceed } from './proceed.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport { warn } from '../util/console.js';\n\nfunction poll(_x) {\n  return _poll.apply(this, arguments);\n}\n\nfunction _poll() {\n  _poll = _asyncToGenerator(function (authClient) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var _a, transaction, meta, availablePollingRemeditaions;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return proceed(authClient, {\n              startPolling: true\n            });\n\n          case 2:\n            transaction = _context2.sent;\n            meta = getSavedTransactionMeta(authClient);\n            availablePollingRemeditaions = (_a = meta === null || meta === void 0 ? void 0 : meta.remediations) === null || _a === void 0 ? void 0 : _a.find(function (remediation) {\n              return remediation.includes('poll');\n            });\n\n            if (!(availablePollingRemeditaions === null || availablePollingRemeditaions === void 0 ? void 0 : availablePollingRemeditaions.length)) {\n              warn('No polling remediations available at the current IDX flow stage');\n            }\n\n            if (!Number.isInteger(options.refresh)) {\n              _context2.next = 8;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var _a, _b, refresh;\n\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      try {\n                        refresh = (_b = (_a = transaction.nextStep) === null || _a === void 0 ? void 0 : _a.poll) === null || _b === void 0 ? void 0 : _b.refresh;\n\n                        if (refresh) {\n                          resolve(poll(authClient, {\n                            refresh: refresh\n                          }));\n                        } else {\n                          resolve(transaction);\n                        }\n                      } catch (err) {\n                        reject(err);\n                      }\n\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee);\n              })), options.refresh);\n            }));\n\n          case 8:\n            return _context2.abrupt(\"return\", transaction);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    })();\n  });\n  return _poll.apply(this, arguments);\n}\n\nexport { poll }; //# sourceMappingURL=poll.js.map","map":null,"metadata":{},"sourceType":"module"}