{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { validateVersionConfig, makeIdxState } from './idxState/index.js';\nimport { isRawIdxResponse } from './types/idx-js.js';\nimport { isAuthApiError } from '../errors/index.js';\nimport { getOAuthDomain } from '../oidc/util/oauth.js';\nimport { IDX_API_VERSION } from '../constants.js';\nimport { httpRequest } from '../http/request.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction introspect(_x) {\n  return _introspect.apply(this, arguments);\n}\n\nfunction _introspect() {\n  _introspect = _asyncToGenerator(function (authClient) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _a, rawIdxResponse, requestDidSucceed, savedIdxResponse, version, domain, interactionHandle, stateHandle, _withCredentials, url, body, headers, withCredentials;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n\n            if (savedIdxResponse) {\n              rawIdxResponse = savedIdxResponse.rawIdxResponse;\n              requestDidSucceed = savedIdxResponse.requestDidSucceed;\n            }\n\n            if (rawIdxResponse) {\n              _context.next = 26;\n              break;\n            }\n\n            version = options.version || IDX_API_VERSION;\n            domain = getOAuthDomain(authClient);\n            interactionHandle = options.interactionHandle, stateHandle = options.stateHandle;\n            _withCredentials = (_a = options.withCredentials) !== null && _a !== void 0 ? _a : true;\n            _context.prev = 7;\n            requestDidSucceed = true;\n            validateVersionConfig(version);\n            url = \"\".concat(domain, \"/idp/idx/introspect\");\n            body = stateHandle ? {\n              stateToken: stateHandle\n            } : {\n              interactionHandle: interactionHandle\n            };\n            headers = {\n              'Content-Type': \"application/ion+json; okta-version=\".concat(version),\n              Accept: \"application/ion+json; okta-version=\".concat(version)\n            };\n            _context.next = 15;\n            return httpRequest(authClient, {\n              method: 'POST',\n              url: url,\n              headers: headers,\n              withCredentials: _withCredentials,\n              args: body\n            });\n\n          case 15:\n            rawIdxResponse = _context.sent;\n            _context.next = 26;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](7);\n\n            if (!(isAuthApiError(_context.t0) && _context.t0.xhr && isRawIdxResponse(_context.t0.xhr.responseJSON))) {\n              _context.next = 25;\n              break;\n            }\n\n            rawIdxResponse = _context.t0.xhr.responseJSON;\n            requestDidSucceed = false;\n            _context.next = 26;\n            break;\n\n          case 25:\n            throw _context.t0;\n\n          case 26:\n            withCredentials = options.withCredentials;\n            return _context.abrupt(\"return\", makeIdxState(authClient, rawIdxResponse, {\n              withCredentials: withCredentials\n            }, requestDidSucceed));\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[7, 18]]);\n    })();\n  });\n  return _introspect.apply(this, arguments);\n}\n\nexport { introspect }; //# sourceMappingURL=introspect.js.map","map":null,"metadata":{},"sourceType":"module"}