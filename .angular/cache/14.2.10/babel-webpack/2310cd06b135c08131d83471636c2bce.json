{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { base64UrlToBuffer, bufferToBase64Url } from '../crypto/base64.js';\n\nvar getEnrolledCredentials = function getEnrolledCredentials() {\n  var authenticatorEnrollments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var credentials = [];\n  authenticatorEnrollments.forEach(function (enrollement) {\n    if (enrollement.key === 'webauthn') {\n      credentials.push({\n        type: 'public-key',\n        id: base64UrlToBuffer(enrollement.credentialId)\n      });\n    }\n  });\n  return credentials;\n};\n\nvar buildCredentialCreationOptions = function buildCredentialCreationOptions(activationData, authenticatorEnrollments) {\n  return {\n    publicKey: {\n      rp: activationData.rp,\n      user: {\n        id: base64UrlToBuffer(activationData.user.id),\n        name: activationData.user.name,\n        displayName: activationData.user.displayName\n      },\n      challenge: base64UrlToBuffer(activationData.challenge),\n      pubKeyCredParams: activationData.pubKeyCredParams,\n      attestation: activationData.attestation,\n      authenticatorSelection: activationData.authenticatorSelection,\n      excludeCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\n\nvar buildCredentialRequestOptions = function buildCredentialRequestOptions(challengeData, authenticatorEnrollments) {\n  return {\n    publicKey: {\n      challenge: base64UrlToBuffer(challengeData.challenge),\n      userVerification: challengeData.userVerification,\n      allowCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\n\nvar getAttestation = function getAttestation(credential) {\n  var response = credential.response;\n  var id = credential.id;\n  var clientData = bufferToBase64Url(response.clientDataJSON);\n  var attestation = bufferToBase64Url(response.attestationObject);\n  return {\n    id: id,\n    clientData: clientData,\n    attestation: attestation\n  };\n};\n\nvar getAssertion = function getAssertion(credential) {\n  var response = credential.response;\n  var id = credential.id;\n  var clientData = bufferToBase64Url(response.clientDataJSON);\n  var authenticatorData = bufferToBase64Url(response.authenticatorData);\n  var signatureData = bufferToBase64Url(response.signature);\n  return {\n    id: id,\n    clientData: clientData,\n    authenticatorData: authenticatorData,\n    signatureData: signatureData\n  };\n};\n\nexport { buildCredentialCreationOptions, buildCredentialRequestOptions, getAssertion, getAttestation }; //# sourceMappingURL=webauthn.js.map","map":null,"metadata":{},"sourceType":"module"}