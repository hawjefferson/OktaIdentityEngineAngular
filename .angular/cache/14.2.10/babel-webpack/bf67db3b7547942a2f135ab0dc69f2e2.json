{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport './remediators/EnrollAuthenticator.js';\nimport './remediators/EnrollPoll.js';\nimport './remediators/SelectEnrollmentChannel.js';\nimport './remediators/EnrollmentChannelData.js';\nimport './remediators/ChallengeAuthenticator.js';\nimport './remediators/ChallengePoll.js';\nimport './remediators/ResetAuthenticator.js';\nimport './remediators/EnrollProfile.js';\nimport './remediators/Identify.js';\nimport './remediators/ReEnrollAuthenticator.js';\nimport './remediators/RedirectIdp.js';\nimport './remediators/SelectAuthenticatorAuthenticate.js';\nimport './remediators/SelectAuthenticatorEnroll.js';\nimport './remediators/SelectAuthenticatorUnlockAccount.js';\nimport './remediators/SelectEnrollProfile.js';\nimport './remediators/AuthenticatorVerificationData.js';\nimport './remediators/AuthenticatorEnrollmentData.js';\nimport './remediators/Skip.js';\nimport { getFlowSpecification } from './flow/FlowSpecification.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\n\nfunction initializeValues(options) {\n  var knownOptions = ['flow', 'remediators', 'actions', 'withCredentials', 'step', 'useGenericRemediator', 'exchangeCodeForTokens'];\n  var values = Object.assign({}, options);\n  knownOptions.forEach(function (option) {\n    delete values[option];\n  });\n  return values;\n}\n\nfunction initializeData(authClient, data) {\n  var options = data.options;\n  options = Object.assign(Object.assign({}, authClient.options.idx), options);\n  var _options = options,\n      flow = _options.flow,\n      withCredentials = _options.withCredentials,\n      remediators = _options.remediators,\n      actions = _options.actions;\n  var status = IdxStatus.PENDING;\n  flow = flow || authClient.idx.getFlow() || 'default';\n\n  if (flow) {\n    authClient.idx.setFlow(flow);\n    var flowSpec = getFlowSpecification(authClient, flow);\n    withCredentials = typeof withCredentials !== 'undefined' ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n\n  return Object.assign(Object.assign({}, data), {\n    options: Object.assign(Object.assign({}, options), {\n      flow: flow,\n      withCredentials: withCredentials,\n      remediators: remediators,\n      actions: actions\n    }),\n    status: status\n  });\n}\n\nfunction getDataFromIntrospect(_x, _x2) {\n  return _getDataFromIntrospect.apply(this, arguments);\n}\n\nfunction _getDataFromIntrospect() {\n  _getDataFromIntrospect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient, data) {\n    var options, stateHandle, withCredentials, version, state, scopes, recoveryToken, activationToken, maxAge, nonce, idxResponse, meta, interactionHandle, interactResponse;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          options = data.options;\n          stateHandle = options.stateHandle, withCredentials = options.withCredentials, version = options.version, state = options.state, scopes = options.scopes, recoveryToken = options.recoveryToken, activationToken = options.activationToken, maxAge = options.maxAge, nonce = options.nonce;\n          meta = getSavedTransactionMeta(authClient, {\n            state: state,\n            recoveryToken: recoveryToken,\n            activationToken: activationToken\n          });\n\n          if (!stateHandle) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 6;\n          return introspect(authClient, {\n            withCredentials: withCredentials,\n            version: version,\n            stateHandle: stateHandle\n          });\n\n        case 6:\n          idxResponse = _context.sent;\n          _context.next = 20;\n          break;\n\n        case 9:\n          interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n\n          if (interactionHandle) {\n            _context.next = 17;\n            break;\n          }\n\n          authClient.transactionManager.clear();\n          _context.next = 14;\n          return interact(authClient, {\n            withCredentials: withCredentials,\n            state: state,\n            scopes: scopes,\n            activationToken: activationToken,\n            recoveryToken: recoveryToken,\n            maxAge: maxAge,\n            nonce: nonce\n          });\n\n        case 14:\n          interactResponse = _context.sent;\n          interactionHandle = interactResponse.interactionHandle;\n          meta = interactResponse.meta;\n\n        case 17:\n          _context.next = 19;\n          return introspect(authClient, {\n            withCredentials: withCredentials,\n            version: version,\n            interactionHandle: interactionHandle\n          });\n\n        case 19:\n          idxResponse = _context.sent;\n\n        case 20:\n          return _context.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n            idxResponse: idxResponse,\n            meta: meta\n          }));\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getDataFromIntrospect.apply(this, arguments);\n}\n\nfunction getDataFromRemediate(_x3, _x4) {\n  return _getDataFromRemediate.apply(this, arguments);\n}\n\nfunction _getDataFromRemediate() {\n  _getDataFromRemediate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(authClient, data) {\n    var idxResponse, options, values, autoRemediate, remediators, actions, flow, step, useGenericRemediator, shouldRemediate, _yield$remediate, idxResponseFromRemediation, nextStep, canceled;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          idxResponse = data.idxResponse, options = data.options, values = data.values;\n          autoRemediate = options.autoRemediate, remediators = options.remediators, actions = options.actions, flow = options.flow, step = options.step, useGenericRemediator = options.useGenericRemediator;\n          shouldRemediate = autoRemediate !== false && (remediators || actions || step);\n\n          if (shouldRemediate) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", data);\n\n        case 5:\n          values = Object.assign(Object.assign({}, values), {\n            stateHandle: idxResponse.rawIdxState.stateHandle\n          });\n          _context2.next = 8;\n          return remediate(authClient, idxResponse, values, {\n            remediators: remediators,\n            actions: actions,\n            flow: flow,\n            step: step,\n            useGenericRemediator: useGenericRemediator\n          });\n\n        case 8:\n          _yield$remediate = _context2.sent;\n          idxResponseFromRemediation = _yield$remediate.idxResponse;\n          nextStep = _yield$remediate.nextStep;\n          canceled = _yield$remediate.canceled;\n          idxResponse = idxResponseFromRemediation;\n          return _context2.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n            idxResponse: idxResponse,\n            nextStep: nextStep,\n            canceled: canceled\n          }));\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getDataFromRemediate.apply(this, arguments);\n}\n\nfunction getTokens(_x5, _x6) {\n  return _getTokens.apply(this, arguments);\n}\n\nfunction _getTokens() {\n  _getTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(authClient, data) {\n    var meta, idxResponse, interactionCode, clientId, codeVerifier, ignoreSignature, redirectUri, urls, scopes, tokenResponse;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          meta = data.meta, idxResponse = data.idxResponse;\n          interactionCode = idxResponse.interactionCode;\n          clientId = meta.clientId, codeVerifier = meta.codeVerifier, ignoreSignature = meta.ignoreSignature, redirectUri = meta.redirectUri, urls = meta.urls, scopes = meta.scopes;\n          _context3.next = 5;\n          return authClient.token.exchangeCodeForTokens({\n            interactionCode: interactionCode,\n            clientId: clientId,\n            codeVerifier: codeVerifier,\n            ignoreSignature: ignoreSignature,\n            redirectUri: redirectUri,\n            scopes: scopes\n          }, urls);\n\n        case 5:\n          tokenResponse = _context3.sent;\n          return _context3.abrupt(\"return\", tokenResponse.tokens);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getTokens.apply(this, arguments);\n}\n\nfunction finalizeData(_x7, _x8) {\n  return _finalizeData.apply(this, arguments);\n}\n\nfunction _finalizeData() {\n  _finalizeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(authClient, data) {\n    var options, idxResponse, canceled, status, exchangeCodeForTokens, shouldSaveResponse, shouldClearTransaction, clearSharedStorage, interactionCode, tokens, enabledFeatures, availableSteps, messages, terminal, hasActions, hasErrors, isTerminalSuccess;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          options = data.options, idxResponse = data.idxResponse, canceled = data.canceled, status = data.status;\n          exchangeCodeForTokens = options.exchangeCodeForTokens;\n          shouldSaveResponse = false;\n          shouldClearTransaction = false;\n          clearSharedStorage = true;\n\n          if (idxResponse) {\n            shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n            enabledFeatures = getEnabledFeatures(idxResponse);\n            availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n            messages = getMessagesFromResponse(idxResponse, options);\n            terminal = isTerminalResponse(idxResponse);\n          }\n\n          if (!terminal) {\n            _context4.next = 15;\n            break;\n          }\n\n          status = IdxStatus.TERMINAL;\n          hasActions = Object.keys(idxResponse.actions).length > 0;\n          hasErrors = !!messages.find(function (msg) {\n            return msg.class === 'ERROR';\n          });\n          isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n\n          if (isTerminalSuccess) {\n            shouldClearTransaction = true;\n          } else {\n            shouldSaveResponse = shouldSaveResponse && hasActions;\n          }\n\n          clearSharedStorage = false;\n          _context4.next = 32;\n          break;\n\n        case 15:\n          if (!canceled) {\n            _context4.next = 20;\n            break;\n          }\n\n          status = IdxStatus.CANCELED;\n          shouldClearTransaction = true;\n          _context4.next = 32;\n          break;\n\n        case 20:\n          if (!(idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode)) {\n            _context4.next = 32;\n            break;\n          }\n\n          interactionCode = idxResponse.interactionCode;\n\n          if (!(exchangeCodeForTokens === false)) {\n            _context4.next = 27;\n            break;\n          }\n\n          status = IdxStatus.SUCCESS;\n          shouldClearTransaction = false;\n          _context4.next = 32;\n          break;\n\n        case 27:\n          _context4.next = 29;\n          return getTokens(authClient, data);\n\n        case 29:\n          tokens = _context4.sent;\n          status = IdxStatus.SUCCESS;\n          shouldClearTransaction = true;\n\n        case 32:\n          return _context4.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n            status: status,\n            interactionCode: interactionCode,\n            tokens: tokens,\n            shouldSaveResponse: shouldSaveResponse,\n            shouldClearTransaction: shouldClearTransaction,\n            clearSharedStorage: clearSharedStorage,\n            enabledFeatures: enabledFeatures,\n            availableSteps: availableSteps,\n            messages: messages,\n            terminal: terminal\n          }));\n\n        case 33:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return _finalizeData.apply(this, arguments);\n}\n\nfunction run(_x9) {\n  return _run.apply(this, arguments);\n}\n\nfunction _run() {\n  _run = _asyncToGenerator(function (authClient) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var _a, data, _data, idxResponse, meta, shouldSaveResponse, shouldClearTransaction, clearSharedStorage, status, enabledFeatures, availableSteps, tokens, nextStep, messages, error, interactionCode, rawIdxResponse, _requestDidSucceed, _ref, actions, context, neededToProceed, proceed, rawIdxState, requestDidSucceed, stepUp;\n\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            data = {\n              options: options,\n              values: initializeValues(options)\n            };\n            data = initializeData(authClient, data);\n            _context5.next = 4;\n            return getDataFromIntrospect(authClient, data);\n\n          case 4:\n            data = _context5.sent;\n            _context5.next = 7;\n            return getDataFromRemediate(authClient, data);\n\n          case 7:\n            data = _context5.sent;\n            _context5.next = 10;\n            return finalizeData(authClient, data);\n\n          case 10:\n            data = _context5.sent;\n            _data = data, idxResponse = _data.idxResponse, meta = _data.meta, shouldSaveResponse = _data.shouldSaveResponse, shouldClearTransaction = _data.shouldClearTransaction, clearSharedStorage = _data.clearSharedStorage, status = _data.status, enabledFeatures = _data.enabledFeatures, availableSteps = _data.availableSteps, tokens = _data.tokens, nextStep = _data.nextStep, messages = _data.messages, error = _data.error, interactionCode = _data.interactionCode;\n\n            if (shouldClearTransaction) {\n              authClient.transactionManager.clear({\n                clearSharedStorage: clearSharedStorage\n              });\n            } else {\n              saveTransactionMeta(authClient, Object.assign({}, meta));\n\n              if (shouldSaveResponse) {\n                rawIdxResponse = idxResponse.rawIdxState, _requestDidSucceed = idxResponse.requestDidSucceed;\n                authClient.transactionManager.saveIdxResponse({\n                  rawIdxResponse: rawIdxResponse,\n                  requestDidSucceed: _requestDidSucceed,\n                  stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n                  interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n                });\n              }\n            }\n\n            _ref = idxResponse || {}, actions = _ref.actions, context = _ref.context, neededToProceed = _ref.neededToProceed, proceed = _ref.proceed, rawIdxState = _ref.rawIdxState, requestDidSucceed = _ref.requestDidSucceed, stepUp = _ref.stepUp;\n            return _context5.abrupt(\"return\", Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n              status: status\n            }, meta && {\n              meta: meta\n            }), enabledFeatures && {\n              enabledFeatures: enabledFeatures\n            }), availableSteps && {\n              availableSteps: availableSteps\n            }), tokens && {\n              tokens: tokens\n            }), nextStep && {\n              nextStep: nextStep\n            }), messages && messages.length && {\n              messages: messages\n            }), error && {\n              error: error\n            }), stepUp && {\n              stepUp: stepUp\n            }), {\n              interactionCode: interactionCode,\n              actions: actions,\n              context: context,\n              neededToProceed: neededToProceed,\n              proceed: proceed,\n              rawIdxState: rawIdxState,\n              requestDidSucceed: requestDidSucceed\n            }));\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    })();\n  });\n  return _run.apply(this, arguments);\n}\n\nexport { run }; //# sourceMappingURL=run.js.map","map":null,"metadata":{},"sourceType":"module"}