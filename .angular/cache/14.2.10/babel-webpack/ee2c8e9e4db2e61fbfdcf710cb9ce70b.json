{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { isBrowser } from '../features.js';\nimport { EVENT_ADDED, EVENT_REMOVED, EVENT_RENEWED, EVENT_SET_STORAGE } from '../oidc/types/TokenManager.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nvar SyncStorageService = /*#__PURE__*/function () {\n  function SyncStorageService(tokenManager) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SyncStorageService);\n\n    this.started = false;\n    this.enablePostMessage = true;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.onTokenAddedHandler = this.onTokenAddedHandler.bind(this);\n    this.onTokenRemovedHandler = this.onTokenRemovedHandler.bind(this);\n    this.onTokenRenewedHandler = this.onTokenRenewedHandler.bind(this);\n    this.onSetStorageHandler = this.onSetStorageHandler.bind(this);\n    this.onSyncMessageHandler = this.onSyncMessageHandler.bind(this);\n  }\n\n  _createClass(SyncStorageService, [{\n    key: \"requiresLeadership\",\n    value: function requiresLeadership() {\n      return false;\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.options.syncStorage && isBrowser();\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var syncChannelName;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.canStart()) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              _context.next = 4;\n              return this.stop();\n\n            case 4:\n              syncChannelName = this.options.syncChannelName;\n              _context.prev = 5;\n              this.channel = new BroadcastChannel(syncChannelName);\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](5);\n              throw new AuthSdkError('SyncStorageService is not supported in current browser.');\n\n            case 12:\n              this.tokenManager.on(EVENT_ADDED, this.onTokenAddedHandler);\n              this.tokenManager.on(EVENT_REMOVED, this.onTokenRemovedHandler);\n              this.tokenManager.on(EVENT_RENEWED, this.onTokenRenewedHandler);\n              this.tokenManager.on(EVENT_SET_STORAGE, this.onSetStorageHandler);\n              this.channel.addEventListener('message', this.onSyncMessageHandler);\n              this.started = true;\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[5, 9]]);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, _b;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.started) {\n                _context2.next = 10;\n                break;\n              }\n\n              this.tokenManager.off(EVENT_ADDED, this.onTokenAddedHandler);\n              this.tokenManager.off(EVENT_REMOVED, this.onTokenRemovedHandler);\n              this.tokenManager.off(EVENT_RENEWED, this.onTokenRenewedHandler);\n              this.tokenManager.off(EVENT_SET_STORAGE, this.onSetStorageHandler);\n              (_a = this.channel) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this.onSyncMessageHandler);\n              _context2.next = 8;\n              return (_b = this.channel) === null || _b === void 0 ? void 0 : _b.close();\n\n            case 8:\n              this.channel = undefined;\n              this.started = false;\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"onTokenAddedHandler\",\n    value: function onTokenAddedHandler(key, token) {\n      var _a;\n\n      if (!this.enablePostMessage) {\n        return;\n      }\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_ADDED,\n        key: key,\n        token: token\n      });\n    }\n  }, {\n    key: \"onTokenRemovedHandler\",\n    value: function onTokenRemovedHandler(key, token) {\n      var _a;\n\n      if (!this.enablePostMessage) {\n        return;\n      }\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_REMOVED,\n        key: key,\n        token: token\n      });\n    }\n  }, {\n    key: \"onTokenRenewedHandler\",\n    value: function onTokenRenewedHandler(key, token, oldToken) {\n      var _a;\n\n      if (!this.enablePostMessage) {\n        return;\n      }\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_RENEWED,\n        key: key,\n        token: token,\n        oldToken: oldToken\n      });\n    }\n  }, {\n    key: \"onSetStorageHandler\",\n    value: function onSetStorageHandler(storage) {\n      var _a;\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_SET_STORAGE,\n        storage: storage\n      });\n    }\n  }, {\n    key: \"onSyncMessageHandler\",\n    value: function onSyncMessageHandler(msg) {\n      this.enablePostMessage = false;\n\n      switch (msg.type) {\n        case EVENT_SET_STORAGE:\n          this.tokenManager.getStorage().setStorage(msg.storage);\n          break;\n\n        case EVENT_ADDED:\n          this.tokenManager.emitAdded(msg.key, msg.token);\n          this.tokenManager.setExpireEventTimeout(msg.key, msg.token);\n          break;\n\n        case EVENT_REMOVED:\n          this.tokenManager.clearExpireEventTimeout(msg.key);\n          this.tokenManager.emitRemoved(msg.key, msg.token);\n          break;\n\n        case EVENT_RENEWED:\n          this.tokenManager.emitRenewed(msg.key, msg.token, msg.oldToken);\n          break;\n      }\n\n      this.enablePostMessage = true;\n    }\n  }]);\n\n  return SyncStorageService;\n}();\n\nexport { SyncStorageService }; //# sourceMappingURL=SyncStorageService.js.map","map":null,"metadata":{},"sourceType":"module"}