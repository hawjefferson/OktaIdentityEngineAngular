{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport 'tiny-emitter';\nimport 'js-cookie';\nimport 'cross-fetch';\n\nfunction renewTokens(_x, _x2) {\n  return _renewTokens.apply(this, arguments);\n}\n\nfunction _renewTokens() {\n  _renewTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, options) {\n    var tokens, accessToken, idToken, scopes, authorizeUrl, userinfoUrl, issuer, _getDefaultTokenParam, responseType;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          tokens = sdk.tokenManager.getTokensSync();\n\n          if (!tokens.refreshToken) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken));\n\n        case 3:\n          if (!(!tokens.accessToken && !tokens.idToken)) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new AuthSdkError('renewTokens() was called but there is no existing token');\n\n        case 5:\n          accessToken = tokens.accessToken || {};\n          idToken = tokens.idToken || {};\n          scopes = accessToken.scopes || idToken.scopes;\n\n          if (scopes) {\n            _context.next = 10;\n            break;\n          }\n\n          throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n\n        case 10:\n          authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n\n          if (authorizeUrl) {\n            _context.next = 13;\n            break;\n          }\n\n          throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n\n        case 13:\n          userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n          issuer = idToken.issuer || sdk.options.issuer;\n          options = Object.assign({\n            scopes: scopes,\n            authorizeUrl: authorizeUrl,\n            userinfoUrl: userinfoUrl,\n            issuer: issuer\n          }, options);\n\n          if (sdk.options.pkce) {\n            options.responseType = 'code';\n          } else {\n            _getDefaultTokenParam = getDefaultTokenParams(sdk), responseType = _getDefaultTokenParam.responseType;\n            options.responseType = responseType;\n          }\n\n          return _context.abrupt(\"return\", getWithoutPrompt(sdk, options).then(function (res) {\n            return res.tokens;\n          }));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _renewTokens.apply(this, arguments);\n}\n\nexport { renewTokens }; //# sourceMappingURL=renewTokens.js.map","map":null,"metadata":{},"sourceType":"module"}