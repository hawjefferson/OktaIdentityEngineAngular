{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\n\nfunction renewTokensWithRefresh(_x, _x2, _x3) {\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nfunction _renewTokensWithRefresh() {\n  _renewTokensWithRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, tokenParams, refreshTokenObject) {\n    var clientId, renewTokenParams, tokenResponse, urls, _yield$handleOAuthRes, tokens, refreshToken;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          clientId = sdk.options.clientId;\n\n          if (clientId) {\n            _context.next = 3;\n            break;\n          }\n\n          throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n\n        case 3:\n          _context.prev = 3;\n          renewTokenParams = Object.assign({}, tokenParams, {\n            clientId: clientId\n          });\n          _context.next = 7;\n          return postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n\n        case 7:\n          tokenResponse = _context.sent;\n          urls = getOAuthUrls(sdk, tokenParams);\n          _context.next = 11;\n          return handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n\n        case 11:\n          _yield$handleOAuthRes = _context.sent;\n          tokens = _yield$handleOAuthRes.tokens;\n          refreshToken = tokens.refreshToken;\n\n          if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n            sdk.tokenManager.updateRefreshToken(refreshToken);\n          }\n\n          return _context.abrupt(\"return\", tokens);\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](3);\n\n          if (isRefreshTokenInvalidError(_context.t0)) {\n            sdk.tokenManager.removeRefreshToken();\n          }\n\n          throw _context.t0;\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 18]]);\n  }));\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nexport { renewTokensWithRefresh }; //# sourceMappingURL=renewTokensWithRefresh.js.map","map":null,"metadata":{},"sourceType":"module"}