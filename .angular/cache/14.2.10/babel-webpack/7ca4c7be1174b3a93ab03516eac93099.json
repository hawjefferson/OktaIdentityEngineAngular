{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { isAuthenticator } from '../types/api.js';\n\nfunction formatAuthenticator(incoming) {\n  var authenticator;\n\n  if (isAuthenticator(incoming)) {\n    authenticator = incoming;\n  } else if (typeof incoming === 'string') {\n    authenticator = {\n      key: incoming\n    };\n  } else {\n    throw new Error('Invalid format for authenticator');\n  }\n\n  return authenticator;\n}\n\nfunction compareAuthenticators(auth1, auth2) {\n  if (!auth1 || !auth2) {\n    return false;\n  }\n\n  if (auth1.id && auth2.id) {\n    return auth1.id === auth2.id;\n  }\n\n  if (auth1.key && auth2.key) {\n    return auth1.key === auth2.key;\n  }\n\n  return false;\n}\n\nfunction findMatchedOption(authenticators, options) {\n  var option;\n\n  var _iterator = _createForOfIteratorHelper(authenticators),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var authenticator = _step.value;\n      option = options.find(function (_ref) {\n        var relatesTo = _ref.relatesTo;\n        return relatesTo.key === authenticator.key;\n      });\n\n      if (option) {\n        return \"break\";\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"break\") break;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return option;\n}\n\nexport { compareAuthenticators, findMatchedOption, formatAuthenticator }; //# sourceMappingURL=util.js.map","map":null,"metadata":{},"sourceType":"module"}