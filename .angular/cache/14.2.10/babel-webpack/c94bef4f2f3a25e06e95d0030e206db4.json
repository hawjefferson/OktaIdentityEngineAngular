{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getRemediator, handleFailedResponse, isTerminalResponse, filterValuesForRemediation, getNextStep } from './util.js';\n\nfunction getActionFromValues(values, idxResponse) {\n  return Object.keys(idxResponse.actions).find(function (action) {\n    return !!values.resend && action.includes('-resend');\n  });\n}\n\nfunction removeActionFromValues(values) {\n  return Object.assign(Object.assign({}, values), {\n    resend: undefined\n  });\n}\n\nfunction removeActionFromOptions(options, actionName) {\n  var actions = options.actions || [];\n  actions = actions.filter(function (entry) {\n    if (typeof entry === 'string') {\n      return entry !== actionName;\n    }\n\n    return entry.name !== actionName;\n  });\n  return Object.assign(Object.assign({}, options), {\n    actions: actions\n  });\n}\n\nfunction remediate(_x, _x2, _x3, _x4) {\n  return _remediate.apply(this, arguments);\n}\n\nfunction _remediate() {\n  _remediate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient, idxResponse, values, options) {\n    var _idxResponse, neededToProceed, interactionCode, _options, flow, remediator, actionFromValues, actionFromOptions, actions, _iterator, _step, _loop, _ret, terminal, nextStep, name, data, gr, _nextStep;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _idxResponse = idxResponse, neededToProceed = _idxResponse.neededToProceed, interactionCode = _idxResponse.interactionCode;\n          _options = options, flow = _options.flow;\n\n          if (!interactionCode) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            idxResponse: idxResponse\n          });\n\n        case 4:\n          remediator = getRemediator(neededToProceed, values, options);\n          actionFromValues = getActionFromValues(values, idxResponse);\n          actionFromOptions = options.actions || [];\n          actions = [].concat(_toConsumableArray(actionFromOptions), _toConsumableArray(actionFromValues && [actionFromValues] || []));\n\n          if (!actions) {\n            _context2.next = 28;\n            break;\n          }\n\n          _iterator = _createForOfIteratorHelper(actions);\n          _context2.prev = 10;\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var action, params, valuesWithoutExecutedAction, optionsWithoutExecutedAction, remediationAction;\n            return _regeneratorRuntime().wrap(function _loop$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  action = _step.value;\n                  params = {};\n\n                  if (typeof action !== 'string') {\n                    params = action.params || {};\n                    action = action.name;\n                  }\n\n                  valuesWithoutExecutedAction = removeActionFromValues(values);\n                  optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n\n                  if (!(typeof idxResponse.actions[action] === 'function')) {\n                    _context.next = 14;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return idxResponse.actions[action](params);\n\n                case 8:\n                  idxResponse = _context.sent;\n\n                  if (!(idxResponse.requestDidSucceed === false)) {\n                    _context.next = 11;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    v: handleFailedResponse(authClient, idxResponse, options)\n                  });\n\n                case 11:\n                  if (!(action === 'cancel')) {\n                    _context.next = 13;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    v: {\n                      idxResponse: idxResponse,\n                      canceled: true\n                    }\n                  });\n\n                case 13:\n                  return _context.abrupt(\"return\", {\n                    v: remediate(authClient, idxResponse, valuesWithoutExecutedAction, optionsWithoutExecutedAction)\n                  });\n\n                case 14:\n                  remediationAction = neededToProceed.find(function (_ref) {\n                    var name = _ref.name;\n                    return name === action;\n                  });\n\n                  if (!remediationAction) {\n                    _context.next = 22;\n                    break;\n                  }\n\n                  _context.next = 18;\n                  return idxResponse.proceed(action, params);\n\n                case 18:\n                  idxResponse = _context.sent;\n\n                  if (!(idxResponse.requestDidSucceed === false)) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    v: handleFailedResponse(authClient, idxResponse, options)\n                  });\n\n                case 21:\n                  return _context.abrupt(\"return\", {\n                    v: remediate(authClient, idxResponse, values, optionsWithoutExecutedAction)\n                  });\n\n                case 22:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _loop);\n          });\n\n          _iterator.s();\n\n        case 13:\n          if ((_step = _iterator.n()).done) {\n            _context2.next = 20;\n            break;\n          }\n\n          return _context2.delegateYield(_loop(), \"t0\", 15);\n\n        case 15:\n          _ret = _context2.t0;\n\n          if (!(typeof _ret === \"object\")) {\n            _context2.next = 18;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", _ret.v);\n\n        case 18:\n          _context2.next = 13;\n          break;\n\n        case 20:\n          _context2.next = 25;\n          break;\n\n        case 22:\n          _context2.prev = 22;\n          _context2.t1 = _context2[\"catch\"](10);\n\n          _iterator.e(_context2.t1);\n\n        case 25:\n          _context2.prev = 25;\n\n          _iterator.f();\n\n          return _context2.finish(25);\n\n        case 28:\n          terminal = isTerminalResponse(idxResponse);\n\n          if (!terminal) {\n            _context2.next = 31;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            idxResponse: idxResponse,\n            terminal: terminal\n          });\n\n        case 31:\n          if (remediator) {\n            _context2.next = 43;\n            break;\n          }\n\n          if (!options.step) {\n            _context2.next = 40;\n            break;\n          }\n\n          values = filterValuesForRemediation(idxResponse, options.step, values);\n          _context2.next = 36;\n          return idxResponse.proceed(options.step, values);\n\n        case 36:\n          idxResponse = _context2.sent;\n\n          if (!(idxResponse.requestDidSucceed === false)) {\n            _context2.next = 39;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", handleFailedResponse(authClient, idxResponse, options));\n\n        case 39:\n          return _context2.abrupt(\"return\", {\n            idxResponse: idxResponse\n          });\n\n        case 40:\n          if (!(flow === 'default')) {\n            _context2.next = 42;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", {\n            idxResponse: idxResponse\n          });\n\n        case 42:\n          throw new AuthSdkError(\"\\n      No remediation can match current flow, check policy settings in your org.\\n      Remediations: [\".concat(neededToProceed.reduce(function (acc, curr) {\n            return acc ? acc + ' ,' + curr.name : curr.name;\n          }, ''), \"]\\n    \"));\n\n        case 43:\n          if (remediator.canRemediate()) {\n            _context2.next = 46;\n            break;\n          }\n\n          nextStep = getNextStep(authClient, remediator, idxResponse);\n          return _context2.abrupt(\"return\", {\n            idxResponse: idxResponse,\n            nextStep: nextStep\n          });\n\n        case 46:\n          name = remediator.getName();\n          data = remediator.getData();\n          _context2.next = 50;\n          return idxResponse.proceed(name, data);\n\n        case 50:\n          idxResponse = _context2.sent;\n\n          if (!(idxResponse.requestDidSucceed === false)) {\n            _context2.next = 53;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", handleFailedResponse(authClient, idxResponse, options));\n\n        case 53:\n          values = remediator.getValuesAfterProceed();\n          options = Object.assign(Object.assign({}, options), {\n            step: undefined\n          });\n\n          if (!(options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse))) {\n            _context2.next = 59;\n            break;\n          }\n\n          gr = getRemediator(idxResponse.neededToProceed, values, options);\n          _nextStep = getNextStep(authClient, gr, idxResponse);\n          return _context2.abrupt(\"return\", {\n            idxResponse: idxResponse,\n            nextStep: _nextStep\n          });\n\n        case 59:\n          return _context2.abrupt(\"return\", remediate(authClient, idxResponse, values, options));\n\n        case 60:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee, null, [[10, 22, 25, 28]]);\n  }));\n  return _remediate.apply(this, arguments);\n}\n\nexport { remediate }; //# sourceMappingURL=remediate.js.map","map":null,"metadata":{},"sourceType":"module"}