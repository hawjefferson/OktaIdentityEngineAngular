{"ast":null,"code":"import { __awaiter } from \"tslib\";\n/*!\n * Copyright (c) 2018, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { Injector } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { SuiModalService, SuiModalModule } from '@giomamaladze/ng2-semantic-ui';\nimport { OktaAuth } from '@okta/okta-auth-js';\nimport { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaCallbackComponent } from '@okta/okta-angular';\nimport { environment } from '../environments/environment';\nimport config from './app.config';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { MessagesComponent } from './messages/messages.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { ConfirmModal } from './modal/confirm.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst appRoutes = [{\n  path: '',\n  component: HomeComponent\n}, {\n  path: 'login/callback',\n  component: OktaCallbackComponent\n}, {\n  path: 'profile',\n  component: ProfileComponent,\n  canActivate: [OktaAuthGuard]\n}, {\n  path: 'messages',\n  component: MessagesComponent,\n  canActivate: [OktaAuthGuard]\n}];\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {}\n\n  AppModule.ɵfac = function AppModule_Factory(t) {\n    return new (t || AppModule)();\n  };\n\n  AppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppModule,\n    bootstrap: [AppComponent]\n  });\n  AppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: OKTA_CONFIG,\n      useFactory: () => {\n        const oktaAuth = new OktaAuth(config.oidc);\n        return {\n          oktaAuth,\n          onAuthRequired: (oktaAuth, injector) => {\n            var _a;\n\n            const triggerLogin = () => __awaiter(void 0, void 0, void 0, function* () {\n              yield oktaAuth.signInWithRedirect();\n            });\n\n            if (!((_a = oktaAuth.authStateManager.getPreviousAuthState()) === null || _a === void 0 ? void 0 : _a.isAuthenticated)) {\n              // App initialization stage\n              triggerLogin();\n            } else {\n              // Ask the user to trigger the login process during token autoRenew process\n              const modalService = injector.get(SuiModalService);\n              modalService.open(new ConfirmModal(\"Do you want to re-authenticate?\", \"Auth required\", \"Yes\", \"No\")).onApprove(triggerLogin).onDeny(() => {});\n            }\n          }\n        };\n      }\n    }, {\n      provide: APP_BASE_HREF,\n      useValue: environment.appBaseHref\n    }],\n    imports: [BrowserModule, HttpClientModule, OktaAuthModule, RouterModule.forRoot(appRoutes, {\n      relativeLinkResolution: 'legacy'\n    }), SuiModalModule]\n  });\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module"}