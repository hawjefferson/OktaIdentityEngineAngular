{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar FormatSanitizer = /*#__PURE__*/function () {\n  function FormatSanitizer() {\n    _classCallCheck(this, FormatSanitizer);\n  }\n\n  _createClass(FormatSanitizer, null, [{\n    key: \"sanitize\",\n    value: function sanitize(formatString) {\n      try {\n        FormatSanitizer.checkOpenBraces(formatString);\n        var blocks = FormatSanitizer.divideBlocksWithMixedCharacters(FormatSanitizer.getFormatBlocks(formatString));\n        return FormatSanitizer.sortFormatBlocks(blocks).join('');\n      } catch (e) {\n        throw new Error('Wrong format');\n      }\n    }\n  }, {\n    key: \"getFormatBlocks\",\n    value: function getFormatBlocks(formatString) {\n      var blocks = new Array();\n      var currentBlock = '';\n      var escape = false;\n\n      var _iterator = _createForOfIteratorHelper(formatString.toCharArray()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n\n          if (char === '\\\\') {\n            if (!escape) {\n              escape = true;\n              currentBlock += char;\n              continue;\n            }\n          }\n\n          if ((char === '[' || char === '{') && !escape) {\n            if (!currentBlock.isEmpty()) {\n              blocks.push(currentBlock);\n            }\n\n            currentBlock = '';\n          }\n\n          currentBlock += char;\n\n          if ((char === ']' || char === '}') && !escape) {\n            blocks.push(currentBlock);\n            currentBlock = '';\n          }\n\n          escape = false;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!currentBlock.isEmpty()) {\n        blocks.push(currentBlock);\n      }\n\n      return blocks;\n    }\n  }, {\n    key: \"divideBlocksWithMixedCharacters\",\n    value: function divideBlocksWithMixedCharacters(blocks) {\n      var resultingBlocks = new Array();\n\n      var _iterator2 = _createForOfIteratorHelper(blocks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var block = _step2.value;\n\n          if (block.startsWith('[')) {\n            var blockBuffer = '';\n\n            var _iterator3 = _createForOfIteratorHelper(block),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var blockCharacter = _step3.value;\n\n                if (blockCharacter === '[') {\n                  blockBuffer += blockCharacter;\n                  continue;\n                }\n\n                if (blockCharacter === ']' && !blockBuffer.endsWith('\\\\')) {\n                  blockBuffer += blockCharacter;\n                  resultingBlocks.push(blockBuffer);\n                  break;\n                }\n\n                if (blockCharacter === '0' || blockCharacter === '9') {\n                  if (blockBuffer.contains('A') || blockBuffer.contains('a') || blockBuffer.contains('-') || blockBuffer.contains('_')) {\n                    blockBuffer += ']';\n                    resultingBlocks.push(blockBuffer);\n                    blockBuffer = \"[\".concat(blockCharacter);\n                    continue;\n                  }\n                }\n\n                if (blockCharacter === 'A' || blockCharacter === 'a') {\n                  if (blockBuffer.contains('0') || blockBuffer.contains('9') || blockBuffer.contains('-') || blockBuffer.contains('_')) {\n                    blockBuffer += ']';\n                    resultingBlocks.push(blockBuffer);\n                    blockBuffer = \"[\".concat(blockCharacter);\n                    continue;\n                  }\n                }\n\n                if (blockCharacter === '-' || blockCharacter === '_') {\n                  if (blockBuffer.contains('0') || blockBuffer.contains('9') || blockBuffer.contains('A') || blockBuffer.contains('a')) {\n                    blockBuffer += ']';\n                    resultingBlocks.push(blockBuffer);\n                    blockBuffer = \"[\".concat(blockCharacter);\n                    continue;\n                  }\n                }\n\n                blockBuffer += blockCharacter;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          } else {\n            resultingBlocks.push(block);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return resultingBlocks;\n    }\n  }, {\n    key: \"sortFormatBlocks\",\n    value: function sortFormatBlocks(blocks) {\n      var sortedBlocks = new Array();\n\n      var _iterator4 = _createForOfIteratorHelper(blocks),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var block = _step4.value;\n          var sortedBlock = void 0;\n\n          if (block.startsWith('[')) {\n            if (block.contains('0') || block.contains('9')) {\n              block = block.replace(/\\[/g, '').replace(/]/g, '');\n              sortedBlock = '[' + block.toCharArray().sort().join('') + ']';\n            } else if (block.contains('a') || block.contains('A')) {\n              block = block.replace(/\\[/g, '').replace(/]/g, '');\n              sortedBlock = '[' + block.toCharArray().sort().join('') + ']';\n            } else {\n              block = block.replace(/\\[/g, '').replace(/]/g, '').replace(/_/g, 'A').replace(/-/g, 'a');\n              sortedBlock = '[' + block.toCharArray().sort().join('') + ']';\n              sortedBlock = sortedBlock.replace(/A/g, '_').replace(/a/g, '-');\n            }\n          } else {\n            sortedBlock = block;\n          }\n\n          sortedBlocks.push(sortedBlock);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return sortedBlocks;\n    }\n  }, {\n    key: \"checkOpenBraces\",\n    value: function checkOpenBraces(string) {\n      var escape = false;\n      var squareBraceOpen = false;\n      var curlyBraceOpen = false;\n\n      var _iterator5 = _createForOfIteratorHelper(string.toCharArray()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var char = _step5.value;\n\n          if (char === '\\\\') {\n            escape = !escape;\n            continue;\n          }\n\n          if (char === '[') {\n            if (squareBraceOpen) {\n              throw new Error('Wrong format');\n            }\n\n            squareBraceOpen = !escape;\n          }\n\n          if (char === ']' && !escape) {\n            squareBraceOpen = false;\n          }\n\n          if (char === '{') {\n            if (curlyBraceOpen) {\n              throw new Error('Wrong format');\n            }\n\n            curlyBraceOpen = !escape;\n          }\n\n          if (char === '}' && !escape) {\n            curlyBraceOpen = false;\n          }\n\n          escape = false;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }]);\n\n  return FormatSanitizer;\n}();\n\nexports.FormatSanitizer = FormatSanitizer;","map":null,"metadata":{},"sourceType":"script"}