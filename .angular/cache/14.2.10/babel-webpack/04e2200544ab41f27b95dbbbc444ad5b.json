{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/jeffersonhaw/Documents/CebPacAngular/samples-js-angular/okta-hosted-login/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nfunction canProceed(authClient) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nfunction proceed(_x) {\n  return _proceed.apply(this, arguments);\n}\n\nfunction _proceed() {\n  _proceed = _asyncToGenerator(function (authClient) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var flow, state, meta;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (canProceed(authClient, options)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n\n          case 2:\n            flow = options.flow, state = options.state;\n\n            if (!flow) {\n              meta = getSavedTransactionMeta(authClient, {\n                state: state\n              });\n              flow = meta === null || meta === void 0 ? void 0 : meta.flow;\n            }\n\n            return _context.abrupt(\"return\", run(authClient, Object.assign(Object.assign({}, options), {\n              flow: flow\n            })));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })();\n  });\n  return _proceed.apply(this, arguments);\n}\n\nexport { canProceed, proceed }; //# sourceMappingURL=proceed.js.map","map":null,"metadata":{},"sourceType":"module"}